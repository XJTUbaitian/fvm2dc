//
// auto-generated by ops.py//

// header
#define OPS_ACC_MD_MACROS
#define OPS_2D
#include "ops_lib_cpp.h"

#include "ops_cuda_reduction.h"
#include "ops_cuda_rt_support.h"

#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
// global constants
__constant__ double xmin;
__constant__ double xmax;
__constant__ int xcells;
__constant__ double ymin;
__constant__ double ymax;
__constant__ int ycells;
__constant__ int xL1;
__constant__ int yM1;

void ops_decl_const_char(int dim, char const *type, int size, char *dat,
                         char const *name) {
  if (!strcmp(name, "xmin")) {
    cutilSafeCall(cudaMemcpyToSymbol(xmin, dat, dim * size));
  } else if (!strcmp(name, "xmax")) {
    cutilSafeCall(cudaMemcpyToSymbol(xmax, dat, dim * size));
  } else if (!strcmp(name, "xcells")) {
    cutilSafeCall(cudaMemcpyToSymbol(xcells, dat, dim * size));
  } else if (!strcmp(name, "ymin")) {
    cutilSafeCall(cudaMemcpyToSymbol(ymin, dat, dim * size));
  } else if (!strcmp(name, "ymax")) {
    cutilSafeCall(cudaMemcpyToSymbol(ymax, dat, dim * size));
  } else if (!strcmp(name, "ycells")) {
    cutilSafeCall(cudaMemcpyToSymbol(ycells, dat, dim * size));
  } else if (!strcmp(name, "xL1")) {
    cutilSafeCall(cudaMemcpyToSymbol(xL1, dat, dim * size));
  } else if (!strcmp(name, "yM1")) {
    cutilSafeCall(cudaMemcpyToSymbol(yM1, dat, dim * size));
  } else {
    printf("error: unknown const name\n");
    exit(1);
  }
}

// user kernel files
#include "gridsetup_kernel_celldx_cuda_kernel.cu"
#include "gridsetup_kernel_celldy_cuda_kernel.cu"
#include "gridsetup_kernel_cellx_cuda_kernel.cu"
#include "gridsetup_kernel_celly_cuda_kernel.cu"
#include "gridsetup_kernel_facedx_cuda_kernel.cu"
#include "gridsetup_kernel_facedy_cuda_kernel.cu"
#include "gridsetup_kernel_facex_cuda_kernel.cu"
#include "gridsetup_kernel_facey_cuda_kernel.cu"
#include "gridsetup_kernel_xcvs_cuda_kernel.cu"
