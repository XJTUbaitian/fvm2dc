//
// auto-generated by ops.py//

// header
#define OPS_ACC_MD_MACROS
#define OPS_2D
#include "ops_lib_cpp.h"
#include "ops_opencl_rt_support.h"
#include "stdio.h"
#include "stdlib.h"
#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
// global constants
extern double xmin;
extern double xmax;
extern int xcells;
extern double ymin;
extern double ymax;
extern int ycells;
extern int xL1;
extern int yM1;

extern ops_opencl_core OPS_opencl_core;

void ops_init_backend() {}

// this needs to be a platform specific copy symbol to device function
void ops_decl_const_char(int dim, char const *type, int typeSize, char *dat,
                         char const *name) {
  cl_int ret = 0;
  if (OPS_opencl_core.constant == NULL) {
    OPS_opencl_core.constant = (cl_mem *)malloc((8) * sizeof(cl_mem));
    for (int i = 0; i < 8; i++) {
      OPS_opencl_core.constant[i] = NULL;
    }
  }
  if (!strcmp(name, "xmin")) {
    if (OPS_opencl_core.constant[0] == NULL) {
      OPS_opencl_core.constant[0] =
          clCreateBuffer(OPS_opencl_core.context, CL_MEM_READ_ONLY,
                         dim * typeSize, NULL, &ret);
      clSafeCall(ret);
    }
    // Write the new constant to the memory of the device
    clSafeCall(clEnqueueWriteBuffer(
        OPS_opencl_core.command_queue, OPS_opencl_core.constant[0], CL_TRUE, 0,
        dim * typeSize, (void *)dat, 0, NULL, NULL));
    clSafeCall(clFlush(OPS_opencl_core.command_queue));
    clSafeCall(clFinish(OPS_opencl_core.command_queue));
  } else if (!strcmp(name, "xmax")) {
    if (OPS_opencl_core.constant[1] == NULL) {
      OPS_opencl_core.constant[1] =
          clCreateBuffer(OPS_opencl_core.context, CL_MEM_READ_ONLY,
                         dim * typeSize, NULL, &ret);
      clSafeCall(ret);
    }
    // Write the new constant to the memory of the device
    clSafeCall(clEnqueueWriteBuffer(
        OPS_opencl_core.command_queue, OPS_opencl_core.constant[1], CL_TRUE, 0,
        dim * typeSize, (void *)dat, 0, NULL, NULL));
    clSafeCall(clFlush(OPS_opencl_core.command_queue));
    clSafeCall(clFinish(OPS_opencl_core.command_queue));
  } else if (!strcmp(name, "xcells")) {
    if (OPS_opencl_core.constant[2] == NULL) {
      OPS_opencl_core.constant[2] =
          clCreateBuffer(OPS_opencl_core.context, CL_MEM_READ_ONLY,
                         dim * typeSize, NULL, &ret);
      clSafeCall(ret);
    }
    // Write the new constant to the memory of the device
    clSafeCall(clEnqueueWriteBuffer(
        OPS_opencl_core.command_queue, OPS_opencl_core.constant[2], CL_TRUE, 0,
        dim * typeSize, (void *)dat, 0, NULL, NULL));
    clSafeCall(clFlush(OPS_opencl_core.command_queue));
    clSafeCall(clFinish(OPS_opencl_core.command_queue));
  } else if (!strcmp(name, "ymin")) {
    if (OPS_opencl_core.constant[3] == NULL) {
      OPS_opencl_core.constant[3] =
          clCreateBuffer(OPS_opencl_core.context, CL_MEM_READ_ONLY,
                         dim * typeSize, NULL, &ret);
      clSafeCall(ret);
    }
    // Write the new constant to the memory of the device
    clSafeCall(clEnqueueWriteBuffer(
        OPS_opencl_core.command_queue, OPS_opencl_core.constant[3], CL_TRUE, 0,
        dim * typeSize, (void *)dat, 0, NULL, NULL));
    clSafeCall(clFlush(OPS_opencl_core.command_queue));
    clSafeCall(clFinish(OPS_opencl_core.command_queue));
  } else if (!strcmp(name, "ymax")) {
    if (OPS_opencl_core.constant[4] == NULL) {
      OPS_opencl_core.constant[4] =
          clCreateBuffer(OPS_opencl_core.context, CL_MEM_READ_ONLY,
                         dim * typeSize, NULL, &ret);
      clSafeCall(ret);
    }
    // Write the new constant to the memory of the device
    clSafeCall(clEnqueueWriteBuffer(
        OPS_opencl_core.command_queue, OPS_opencl_core.constant[4], CL_TRUE, 0,
        dim * typeSize, (void *)dat, 0, NULL, NULL));
    clSafeCall(clFlush(OPS_opencl_core.command_queue));
    clSafeCall(clFinish(OPS_opencl_core.command_queue));
  } else if (!strcmp(name, "ycells")) {
    if (OPS_opencl_core.constant[5] == NULL) {
      OPS_opencl_core.constant[5] =
          clCreateBuffer(OPS_opencl_core.context, CL_MEM_READ_ONLY,
                         dim * typeSize, NULL, &ret);
      clSafeCall(ret);
    }
    // Write the new constant to the memory of the device
    clSafeCall(clEnqueueWriteBuffer(
        OPS_opencl_core.command_queue, OPS_opencl_core.constant[5], CL_TRUE, 0,
        dim * typeSize, (void *)dat, 0, NULL, NULL));
    clSafeCall(clFlush(OPS_opencl_core.command_queue));
    clSafeCall(clFinish(OPS_opencl_core.command_queue));
  } else if (!strcmp(name, "xL1")) {
    if (OPS_opencl_core.constant[6] == NULL) {
      OPS_opencl_core.constant[6] =
          clCreateBuffer(OPS_opencl_core.context, CL_MEM_READ_ONLY,
                         dim * typeSize, NULL, &ret);
      clSafeCall(ret);
    }
    // Write the new constant to the memory of the device
    clSafeCall(clEnqueueWriteBuffer(
        OPS_opencl_core.command_queue, OPS_opencl_core.constant[6], CL_TRUE, 0,
        dim * typeSize, (void *)dat, 0, NULL, NULL));
    clSafeCall(clFlush(OPS_opencl_core.command_queue));
    clSafeCall(clFinish(OPS_opencl_core.command_queue));
  } else if (!strcmp(name, "yM1")) {
    if (OPS_opencl_core.constant[7] == NULL) {
      OPS_opencl_core.constant[7] =
          clCreateBuffer(OPS_opencl_core.context, CL_MEM_READ_ONLY,
                         dim * typeSize, NULL, &ret);
      clSafeCall(ret);
    }
    // Write the new constant to the memory of the device
    clSafeCall(clEnqueueWriteBuffer(
        OPS_opencl_core.command_queue, OPS_opencl_core.constant[7], CL_TRUE, 0,
        dim * typeSize, (void *)dat, 0, NULL, NULL));
    clSafeCall(clFlush(OPS_opencl_core.command_queue));
    clSafeCall(clFinish(OPS_opencl_core.command_queue));
  } else {
    printf("error: unknown const name\n");
    exit(1);
  }
}

extern ops_opencl_core OPS_opencl_core;

void buildOpenCLKernels() {
  static bool isbuilt = false;

  if (!isbuilt) {
    // clSafeCall( clUnloadCompiler() );

    OPS_opencl_core.n_kernels = 8;
    OPS_opencl_core.kernel = (cl_kernel *)malloc(8 * sizeof(cl_kernel));
  }
  isbuilt = true;
}

// user kernel files
#include "gridsetup_kernel_celldx_opencl_kernel.cpp"
#include "gridsetup_kernel_celldy_opencl_kernel.cpp"
#include "gridsetup_kernel_cellx_opencl_kernel.cpp"
#include "gridsetup_kernel_celly_opencl_kernel.cpp"
#include "gridsetup_kernel_facedx_opencl_kernel.cpp"
#include "gridsetup_kernel_facedy_opencl_kernel.cpp"
#include "gridsetup_kernel_facex_opencl_kernel.cpp"
#include "gridsetup_kernel_facey_opencl_kernel.cpp"
